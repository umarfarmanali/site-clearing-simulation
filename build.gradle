/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    
    // Apply the checkstyle plugin.
    id 'checkstyle'
    
    // Apply the jacoco plugin.
    id 'jacoco'
    
    // Optional (to generate Eclipse project files)
    id 'eclipse'
	// Optional (to generate IntelliJ IDEA project files)
	id 'idea'
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'log4j:log4j:1.2.17'
  	implementation 'commons-logging:commons-logging:1.2'
    
    // Use Hamcrest test framework.
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
    // Use JUnit test framework.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    // Use Mockito test framework.
    testImplementation 'org.mockito:mockito-core:4.0.0'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:29.0-jre'
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
    finalizedBy jacocoTestReport
}

checkstyle {
    toolVersion '8.36.1'
    configFile file("config/checkstyle/checkstyle.xml")
    checkstyleTest.enabled = false
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacoco")
}
jacocoTestReport {
    dependsOn test
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "com/oracle/aconex/scs/Main.class"
            ])
        }))
    }
    
 jar {
    manifest {
        attributes(
                'Main-Class': 'com.oracle.aconex.scs.Main'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
}